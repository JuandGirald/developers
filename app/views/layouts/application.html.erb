<!DOCTYPE html>
<html>
<head>
  <title>Develpers</title>
  <script src="//maps.google.com/maps/api/js?v=3.13&amp;sensor=false&amp;libraries=geometry" type="text/javascript"></script>
  <script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'></script>

  
  <style>
    html { height: 100% }
    body { height: 100%; margin: 0; padding: 0 }
    #map-canvas { height: 100%;}
    h1 { position:absolute; }
  </style>
  
  <script src="assets/heatmap.js"></script>
  <script src="assets/gmaps-heatmap.js"></script>    
  
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
</head>
<body>

<%= yield %>

<script>
  function gmap2_show(developer) {
    // if ((developer.latitude == null) || (developer.longitude == null) ) {    // validation check if coordinates are there
    //   return 0;
    // }

    handler = Gmaps.build('Google');    // map init
    handler.buildMap({ provider: {}, internal: {id: 'multi_markers'}}, function(){
      var json_array = []
      for (i = 0, len = developer.length; i < len; ++i) {
        
        json_array.push(    // put marker method
          {
            "lat": developer[i].latitude,    // coordinates from parameter developer
            "lng": developer[i].longitude,
            "infowindow": "<b>" + developer[i].name + "</b> , " + developer[i].location
          }
        );
      }
      var markers = handler.addMarkers(json_array);

      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();
      handler.getMap().setZoom(2);    // set the default zoom of the map
    });
  }
   // map center

  function gmap_show(developer) {
    var myLatlng = new google.maps.LatLng(25.6586, -30.3568);
    // map options,
    var myOptions = {
      zoom: 2,
      center: myLatlng
    };
    // standard map
    map = new google.maps.Map(document.getElementById("map-canvas"), myOptions);
    // heatmap layer
    heatmap = new HeatmapOverlay(map, 
      {
        // radius should be small ONLY if scaleRadius is true (or small radius is intended)
        "radius": 2,
        "maxOpacity": 1, 
        // scales the radius based on map zoom
        "scaleRadius": true, 
        // if set to false the heatmap uses the global maximum for colorization
        // if activated: uses the data maximum within the current map boundaries 
        //   (there will always be a red spot with useLocalExtremas true)
        "useLocalExtrema": true,
        // which field name in your data represents the latitude - default "lat"
        latField: 'lat',
        // which field name in your data represents the longitude - default "lng"
        lngField: 'lng',
        // which field name in your data represents the data value - default "value"
        valueField: 'count'
      }
    );
    
    var testData = {
      max: 8,
      data: [{ 
        lat: 0,    // coordinates from parameter developer
        lng: 0,
        count: 1
      }]
    };

    for (i = 0, len = developer.length; i < len; ++i) {
        
      testData['data'].push(    // put marker method
        {
          lat: developer[i].latitude,    // coordinates from parameter developer
          lng: developer[i].longitude,
          count: 1
        }
      );
    }
    heatmap.setData(testData);
  }
</script>
</body>
